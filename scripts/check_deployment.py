#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –¥–µ–ø–ª–æ—é.
"""

import json
import os
import subprocess
import sys
import time
from pathlib import Path
from typing import Dict, List, Tuple

import requests


# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
class Colors:
    GREEN = "\033[92m"
    RED = "\033[91m"
    YELLOW = "\033[93m"
    BLUE = "\033[94m"
    ENDC = "\033[0m"
    BOLD = "\033[1m"


def print_status(message: str, status: str):
    """–ü–µ—á–∞—Ç—å —Å—Ç–∞—Ç—É—Å–∞ —Å —Ü–≤–µ—Ç–æ–º."""
    if status == "PASS":
        print(f"{Colors.GREEN}‚úÖ {message}{Colors.ENDC}")
    elif status == "FAIL":
        print(f"{Colors.RED}‚ùå {message}{Colors.ENDC}")
    elif status == "WARN":
        print(f"{Colors.YELLOW}‚ö†Ô∏è  {message}{Colors.ENDC}")
    else:
        print(f"{Colors.BLUE}‚ÑπÔ∏è  {message}{Colors.ENDC}")


def run_command(command: str) -> Tuple[bool, str]:
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –∏ –≤–æ–∑–≤—Ä–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞."""
    try:
        result = subprocess.run(
            command.split(), capture_output=True, text=True, timeout=30
        )
        return result.returncode == 0, result.stdout + result.stderr
    except subprocess.TimeoutExpired:
        return False, "Timeout"
    except Exception as e:
        return False, str(e)


def check_environment_variables() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
    print(f"\n{Colors.BOLD}üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è{Colors.ENDC}")

    required_vars = ["OPENAI_API_KEY"]

    optional_vars = ["GPT_MODEL", "DEBUG", "ALLOWED_ORIGINS", "RATE_LIMIT_PER_MINUTE"]

    all_good = True

    for var in required_vars:
        if os.getenv(var):
            print_status(f"{var} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞", "PASS")
        else:
            print_status(f"{var} –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–ê (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è)", "FAIL")
            all_good = False

    for var in optional_vars:
        if os.getenv(var):
            print_status(f"{var} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞", "PASS")
        else:
            print_status(f"{var} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è)", "WARN")

    return all_good


def check_dependencies() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π."""
    print(f"\n{Colors.BOLD}üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π{Colors.ENDC}")

    success, output = run_command("pip check")
    if success:
        print_status("–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã", "PASS")
        return True
    else:
        print_status(f"–ü—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏: {output}", "FAIL")
        return False


def check_code_quality() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞."""
    print(f"\n{Colors.BOLD}üß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞{Colors.ENDC}")

    checks = [
        ("black --check src/ tests/", "Black —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"),
        ("isort --check-only src/ tests/", "isort –∏–º–ø–æ—Ä—Ç—ã"),
        ("flake8 src/ tests/", "flake8 –ª–∏–Ω—Ç–∏–Ω–≥"),
        ("mypy src/", "mypy —Ç–∏–ø–∏–∑–∞—Ü–∏—è"),
    ]

    all_good = True

    for command, description in checks:
        success, output = run_command(command)
        if success:
            print_status(description, "PASS")
        else:
            print_status(f"{description}: {output[:100]}...", "FAIL")
            all_good = False

    return all_good


def check_tests() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤."""
    print(f"\n{Colors.BOLD}üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤{Colors.ENDC}")

    success, output = run_command("pytest --tb=short")
    if success:
        print_status("–í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏", "PASS")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∫—Ä—ã—Ç–∏—è
        success_cov, output_cov = run_command(
            "pytest --cov=src --cov-report=term-missing"
        )
        if "TOTAL" in output_cov:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ–∫—Ä—ã—Ç–∏—è
            lines = output_cov.split("\n")
            for line in lines:
                if "TOTAL" in line:
                    coverage = line.split()[-1].replace("%", "")
                    try:
                        coverage_percent = int(coverage)
                        if coverage_percent >= 80:
                            print_status(f"–ü–æ–∫—Ä—ã—Ç–∏–µ —Ç–µ—Å—Ç–∞–º–∏: {coverage}%", "PASS")
                        else:
                            print_status(
                                f"–ü–æ–∫—Ä—ã—Ç–∏–µ —Ç–µ—Å—Ç–∞–º–∏: {coverage}% (< 80%)", "WARN"
                            )
                    except:
                        print_status("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–∫—Ä—ã—Ç–∏–µ", "WARN")
                    break

        return True
    else:
        print_status(f"–¢–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏: {output[:200]}...", "FAIL")
        return False


def check_security() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏."""
    print(f"\n{Colors.BOLD}üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏{Colors.ENDC}")

    all_good = True

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ DEBUG —Ä–µ–∂–∏–º–∞
    debug = os.getenv("DEBUG", "false").lower()
    if debug in ["false", "0", ""]:
        print_status("DEBUG —Ä–µ–∂–∏–º –æ—Ç–∫–ª—é—á—ë–Ω", "PASS")
    else:
        print_status("DEBUG —Ä–µ–∂–∏–º –≤–∫–ª—é—á—ë–Ω (–Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞)", "FAIL")
        all_good = False

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ CORS
    allowed_origins = os.getenv("ALLOWED_ORIGINS", "")
    if "*" in allowed_origins:
        print_status("CORS —Ä–∞–∑—Ä–µ—à—ë–Ω –¥–ª—è –≤—Å–µ—Ö –¥–æ–º–µ–Ω–æ–≤ (–Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ)", "FAIL")
        all_good = False
    elif allowed_origins:
        print_status("CORS –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤", "PASS")
    else:
        print_status("CORS –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω", "WARN")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limiting
    rate_limit = os.getenv("RATE_LIMIT_PER_MINUTE")
    if rate_limit and int(rate_limit) > 0:
        print_status(f"Rate limiting: {rate_limit} –∑–∞–ø—Ä–æ—Å–æ–≤/–º–∏–Ω", "PASS")
    else:
        print_status("Rate limiting –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω", "WARN")

    return all_good


def check_docker() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ Docker –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
    print(f"\n{Colors.BOLD}üê≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker{Colors.ENDC}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Dockerfile
    if Path("Dockerfile").exists():
        print_status("Dockerfile –Ω–∞–π–¥–µ–Ω", "PASS")
    else:
        print_status("Dockerfile –Ω–µ –Ω–∞–π–¥–µ–Ω", "FAIL")
        return False

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ docker-compose.yml
    if Path("docker-compose.yml").exists():
        print_status("docker-compose.yml –Ω–∞–π–¥–µ–Ω", "PASS")
    else:
        print_status("docker-compose.yml –Ω–µ –Ω–∞–π–¥–µ–Ω", "WARN")

    # –ü–æ–ø—ã—Ç–∫–∞ —Å–±–æ—Ä–∫–∏ –æ–±—Ä–∞–∑–∞
    print_status("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–±–æ—Ä–∫–∏ Docker –æ–±—Ä–∞–∑–∞...", "INFO")
    success, output = run_command("docker build -t optimaai-bot-test .")
    if success:
        print_status("Docker –æ–±—Ä–∞–∑ —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è —É—Å–ø–µ—à–Ω–æ", "PASS")
        return True
    else:
        print_status(f"–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ Docker: {output[:200]}...", "FAIL")
        return False


def check_api_health(url: str = "http://localhost:8000") -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ API."""
    print(f"\n{Colors.BOLD}üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ API{Colors.ENDC}")

    try:
        response = requests.get(f"{url}/health", timeout=10)
        if response.status_code == 200:
            data = response.json()
            print_status(f"API –¥–æ—Å—Ç—É–ø–µ–Ω: {data.get('status')}", "PASS")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
            services = data.get("services", {})
            for service, status in services.items():
                if status == "ok":
                    print_status(f"–°–µ—Ä–≤–∏—Å {service}: {status}", "PASS")
                else:
                    print_status(f"–°–µ—Ä–≤–∏—Å {service}: {status}", "WARN")

            return True
        else:
            print_status(f"API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: HTTP {response.status_code}", "FAIL")
            return False
    except requests.exceptions.RequestException as e:
        print_status(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API: {str(e)}", "FAIL")
        return False


def generate_report(results: Dict[str, bool]) -> None:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á—ë—Ç–∞."""
    print(f"\n{Colors.BOLD}üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–Å–¢{Colors.ENDC}")
    print("=" * 50)

    total_checks = len(results)
    passed_checks = sum(results.values())

    for check, passed in results.items():
        status = "PASS" if passed else "FAIL"
        print_status(check, status)

    print("=" * 50)
    print(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {passed_checks}/{total_checks} –ø—Ä–æ–≤–µ—Ä–æ–∫")

    if passed_checks == total_checks:
        print(
            f"\n{Colors.GREEN}{Colors.BOLD}üéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´! –ì–û–¢–û–í –ö –î–ï–ü–õ–û–Æ!{Colors.ENDC}"
        )
        return True
    else:
        print(
            f"\n{Colors.RED}{Colors.BOLD}‚ùå –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´! –ù–ï –ì–û–¢–û–í –ö –î–ï–ü–õ–û–Æ!{Colors.ENDC}"
        )
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print(f"{Colors.BOLD}üöÄ –ü–†–û–í–ï–†–ö–ê –ì–û–¢–û–í–ù–û–°–¢–ò –ö –î–ï–ü–õ–û–Æ OptimaAI Bot{Colors.ENDC}")
    print("=" * 60)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if not Path("main.py").exists():
        print_status("–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞", "FAIL")
        sys.exit(1)

    results = {}

    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
    results["–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"] = check_environment_variables()
    results["–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"] = check_dependencies()
    results["–ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞"] = check_code_quality()
    results["–¢–µ—Å—Ç—ã"] = check_tests()
    results["–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å"] = check_security()
    results["Docker"] = check_docker()

    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ API (–µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω)
    api_available = check_api_health()
    if api_available:
        results["API"] = True

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞
    all_passed = generate_report(results)

    # –í–æ–∑–≤—Ä–∞—Ç –∫–æ–¥–∞ –≤—ã—Ö–æ–¥–∞
    sys.exit(0 if all_passed else 1)


if __name__ == "__main__":
    main()
