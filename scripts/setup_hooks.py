#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Git hooks –∏ pre-commit.
"""

import os
import sys
import subprocess
import shutil
from pathlib import Path


class HooksSetup:
    """–ö–ª–∞—Å—Å –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Git hooks."""
    
    def __init__(self):
        self.project_root = Path(__file__).parent.parent
        self.git_hooks_dir = self.project_root / ".git" / "hooks"
    
    def run_command(self, command, cwd=None):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É."""
        try:
            result = subprocess.run(
                command,
                cwd=cwd or self.project_root,
                capture_output=True,
                text=True,
                shell=True
            )
            return result.returncode == 0, result.stdout, result.stderr
        except Exception as e:
            return False, "", str(e)
    
    def install_pre_commit(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å pre-commit."""
        print("üîß Installing pre-commit...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ pre-commit
        success, stdout, stderr = self.run_command("pre-commit --version")
        if not success:
            print("Installing pre-commit...")
            success, stdout, stderr = self.run_command("pip install pre-commit")
            if not success:
                print(f"‚ùå Failed to install pre-commit: {stderr}")
                return False
        
        print("‚úÖ pre-commit is available")
        return True
    
    def setup_pre_commit_hooks(self):
        """–ù–∞—Å—Ç—Ä–æ–∏—Ç—å pre-commit hooks."""
        print("üîß Setting up pre-commit hooks...")
        
        success, stdout, stderr = self.run_command("pre-commit install")
        if not success:
            print(f"‚ùå Failed to install pre-commit hooks: {stderr}")
            return False
        
        print("‚úÖ Pre-commit hooks installed")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º commit-msg hook
        success, stdout, stderr = self.run_command("pre-commit install --hook-type commit-msg")
        if success:
            print("‚úÖ Commit-msg hook installed")
        
        return True
    
    def create_commit_msg_hook(self):
        """–°–æ–∑–¥–∞—Ç—å commit-msg hook –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ –∫–æ–º–º–∏—Ç–æ–≤."""
        hook_content = '''#!/bin/sh
# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ commit message

commit_regex='^(feat|fix|docs|style|refactor|test|chore|perf|ci|build|revert)(\(.+\))?: .{1,50}'

error_msg="–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç commit message!
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: type(scope): description

–¢–∏–ø—ã:
- feat: –Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
- fix: –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–≥–∞
- docs: –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
- style: —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞
- refactor: —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥
- test: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤
- chore: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π, –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
- perf: —É–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
- ci: –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ CI/CD
- build: –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å–±–æ—Ä–∫–µ
- revert: –æ—Ç–∫–∞—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π

–ü—Ä–∏–º–µ—Ä: feat(auth): add Google OAuth integration"

if ! grep -qE "$commit_regex" "$1"; then
    echo "$error_msg" >&2
    exit 1
fi
'''
        
        hook_path = self.git_hooks_dir / "commit-msg"
        try:
            with open(hook_path, 'w') as f:
                f.write(hook_content)
            
            # –î–µ–ª–∞–µ–º —Ñ–∞–π–ª –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º
            os.chmod(hook_path, 0o755)
            print("‚úÖ Commit-msg hook created")
            return True
        except Exception as e:
            print(f"‚ùå Failed to create commit-msg hook: {e}")
            return False
    
    def create_pre_push_hook(self):
        """–°–æ–∑–¥–∞—Ç—å pre-push hook –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤."""
        hook_content = '''#!/bin/sh
# Pre-push hook –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤

echo "üß™ Running tests before push..."

# –ó–∞–ø—É—Å–∫–∞–µ–º –±—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã
if ! make test-quick; then
    echo "‚ùå Tests failed! Push aborted."
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞
if ! make lint-quick; then
    echo "‚ùå Code quality check failed! Push aborted."
    exit 1
fi

echo "‚úÖ All checks passed. Pushing..."
'''
        
        hook_path = self.git_hooks_dir / "pre-push"
        try:
            with open(hook_path, 'w') as f:
                f.write(hook_content)
            
            os.chmod(hook_path, 0o755)
            print("‚úÖ Pre-push hook created")
            return True
        except Exception as e:
            print(f"‚ùå Failed to create pre-push hook: {e}")
            return False
    
    def update_makefile(self):
        """–û–±–Ω–æ–≤–∏—Ç—å Makefile —Å –Ω–æ–≤—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏."""
        makefile_additions = '''
# –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è hooks
test-quick:
	pytest tests/ -x --tb=short -q --disable-warnings

lint-quick:
	flake8 --select=E9,F63,F7,F82 src/ tests/

format-check:
	black --check src/ tests/
	isort --check-only src/ tests/

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è hooks
setup-hooks:
	python scripts/setup_hooks.py

pre-commit-run:
	pre-commit run --all-files

pre-commit-update:
	pre-commit autoupdate
'''
        
        makefile_path = self.project_root / "Makefile"
        try:
            with open(makefile_path, 'a') as f:
                f.write(makefile_additions)
            print("‚úÖ Makefile updated with hook commands")
            return True
        except Exception as e:
            print(f"‚ùå Failed to update Makefile: {e}")
            return False
    
    def setup_all(self):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É hooks."""
        print("üöÄ Setting up Git hooks and pre-commit...")
        
        if not self.git_hooks_dir.exists():
            print("‚ùå Not a Git repository or .git/hooks directory not found")
            return False
        
        success = True
        success &= self.install_pre_commit()
        success &= self.setup_pre_commit_hooks()
        success &= self.create_commit_msg_hook()
        success &= self.create_pre_push_hook()
        
        if success:
            print("\nüéâ Git hooks setup completed successfully!")
            print("\n–¢–µ–ø–µ—Ä—å –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∫–æ–º–º–∏—Ç–µ –±—É–¥—É—Ç:")
            print("- –ü—Ä–æ–≤–µ—Ä—è—Ç—å—Å—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞")
            print("- –ó–∞–ø—É—Å–∫–∞—Ç—å—Å—è –ª–∏–Ω—Ç–µ—Ä—ã")
            print("- –ü—Ä–æ–≤–µ—Ä—è—Ç—å—Å—è —Ç–∏–ø—ã")
            print("- –ü—Ä–æ–≤–µ—Ä—è—Ç—å—Å—è —Ñ–æ—Ä–º–∞—Ç commit message")
            print("\n–ü—Ä–∏ push –±—É–¥—É—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –±—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã")
        else:
            print("\n‚ùå Some hooks setup failed")
        
        return success


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    setup = HooksSetup()
    success = setup.setup_all()
    sys.exit(0 if success else 1)


if __name__ == "__main__":
    main()