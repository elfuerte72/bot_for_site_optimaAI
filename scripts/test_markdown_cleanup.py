#!/usr/bin/env python3
"""
Тестовый скрипт для проверки очистки markdown.
"""

import re

def clean_markdown(text: str) -> str:
    """
    Очистить текст от markdown символов и правильно отформатировать.
    
    Args:
        text: Текст с markdown разметкой
        
    Returns:
        str: Очищенный и отформатированный текст
    """
    if not text:
        return text
        
    # Удаляем заголовки (# ## ### и т.д.)
    text = re.sub(r'^#{1,6}\s+', '', text, flags=re.MULTILINE)
    
    # Обрабатываем жирный текст (**text** или __text__) - убираем звездочки, но оставляем текст
    text = re.sub(r'\*\*(.*?)\*\*', r'\1', text)
    text = re.sub(r'__(.*?)__', r'\1', text)
    
    # Обрабатываем курсив (*text* или _text_) - убираем символы, но оставляем текст
    text = re.sub(r'(?<!\*)\*([^*]+?)\*(?!\*)', r'\1', text)
    text = re.sub(r'(?<!_)_([^_]+?)_(?!_)', r'\1', text)
    
    # Удаляем зачеркнутый текст (~~text~~)
    text = re.sub(r'~~(.*?)~~', r'\1', text)
    
    # Удаляем код (`code` или ```code```)
    text = re.sub(r'`{1,3}[^`]*`{1,3}', '', text)
    
    # Удаляем ссылки [text](url) - оставляем только текст
    text = re.sub(r'\[([^\]]+)\]\([^\)]+\)', r'\1', text)
    
    # Удаляем изображения ![alt](url)
    text = re.sub(r'!\[([^\]]*)\]\([^\)]+\)', r'\1', text)
    
    # Удаляем горизонтальные линии (--- или ***)
    text = re.sub(r'^[-*]{3,}$', '', text, flags=re.MULTILINE)
    
    # Обрабатываем маркированные списки (- * +) - заменяем на абзацы с отступами
    text = re.sub(r'^[\s]*[-*+]\s+(.+)$', r'\n• \1', text, flags=re.MULTILINE)
    
    # Обрабатываем нумерованные списки (1. 2. и т.д.) - заменяем на абзацы с номерами
    def replace_numbered_list(match):
        number = match.group(1)
        content = match.group(2)
        return f'\n{number}. {content}'
    
    text = re.sub(r'^[\s]*(\d+)\.[\s]+(.+)$', replace_numbered_list, text, flags=re.MULTILINE)
    
    # Удаляем цитаты (> text)
    text = re.sub(r'^>\s*', '', text, flags=re.MULTILINE)
    
    # Удаляем таблицы (строки с |)
    text = re.sub(r'^\|.*\|$', '', text, flags=re.MULTILINE)
    text = re.sub(r'^[\s]*[-|:]+[\s]*$', '', text, flags=re.MULTILINE)
    
    # Нормализуем переносы строк - заменяем множественные переносы на двойные
    text = re.sub(r'\n{3,}', '\n\n', text)
    
    # Убираем лишние пробелы в начале и конце строк
    text = re.sub(r'^\s+', '', text, flags=re.MULTILINE)
    text = re.sub(r'\s+$', '', text, flags=re.MULTILINE)
    
    # Добавляем отступы после точек в списках для лучшей читаемости
    text = re.sub(r'(\d+\.)([^\s])', r'\1 \2', text)
    
    return text.strip()


def test_markdown_cleanup():
    """Тестирование очистки markdown."""
    
    # Пример текста с markdown (как в вашем примере)
    test_text = """OptimaAI предлагает широкий спектр услуг, направленных на внедрение и использование искусственного интеллекта как для бизнеса, так и для частных клиентов. Вот основные направления: 

1. **Обучение и курсы**: Мы проводим обучающие программы по различным аспектам ИИ — от основ до углубленных тем. Это поможет вам понять, как применять ИИ в ваших проектах. 

2. **Консультации**: У нас есть возможность провести консультации для оценки ваших потребностей и подбора подходящих решений. Мы поможем вам определить, как ИИ может быть полезен именно вам. 

3. **Автоматизация процессов**: Мы помогаем автоматизировать рутинные задачи с помощью ИИ, что позволяет сэкономить время и повысить эффективность. 

4. **Разработка индивидуальных решений**: Если у вас есть специфические задачи, мы можем разработать кастомизированные решения на базе ИИ для вашего бизнеса или личных нужд. 

Если вас интересует что-то конкретное, например, обучение или автоматизация, дайте знать! Хотите, я помогу выбрать лучший вариант?"""

    print("ИСХОДНЫЙ ТЕКСТ:")
    print("=" * 50)
    print(test_text)
    print("\n" + "=" * 50)
    
    cleaned_text = clean_markdown(test_text)
    
    print("ОЧИЩЕННЫЙ ТЕКСТ:")
    print("=" * 50)
    print(cleaned_text)
    print("\n" + "=" * 50)
    
    # Дополнительные тесты
    additional_tests = [
        "**Жирный текст** и *курсив*",
        "- Первый пункт\n- Второй пункт\n- Третий пункт",
        "1. Первый\n2. Второй\n3. Третий",
        "# Заголовок\n## Подзаголовок\n### Еще один",
        "`код` и ```блок кода```",
        "[ссылка](http://example.com) и ![изображение](image.jpg)",
    ]
    
    print("ДОПОЛНИТЕЛЬНЫЕ ТЕСТЫ:")
    print("=" * 50)
    for i, test in enumerate(additional_tests, 1):
        print(f"Тест {i}:")
        print(f"Исходный: {test}")
        print(f"Очищенный: {clean_markdown(test)}")
        print("-" * 30)


if __name__ == "__main__":
    test_markdown_cleanup()