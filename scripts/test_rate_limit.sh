#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è rate limiting –∏ DDoS –∑–∞—â–∏—Ç—ã
# –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É IP

set -e

URL="http://localhost:8000"
ENDPOINT="/health"
REQUESTS_COUNT=100
CONCURRENT_REQUESTS=10
DELAY=0.1
API_KEY=""
VERBOSE=false

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${GREEN}‚ö° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Rate Limiting –∏ DDoS –∑–∞—â–∏—Ç—ã${NC}"
echo ""

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø—Ä–∞–≤–∫–∏
show_help() {
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–æ–ø—Ü–∏–∏]"
    echo ""
    echo "–û–ø—Ü–∏–∏:"
    echo "  -u, --url URL        –ë–∞–∑–æ–≤—ã–π URL —Å–µ—Ä–≤–µ—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: $URL)"
    echo "  -e, --endpoint PATH  Endpoint –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: $ENDPOINT)"
    echo "  -n, --requests N     –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: $REQUESTS_COUNT)"
    echo "  -c, --concurrent N   –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: $CONCURRENT_REQUESTS)"
    echo "  -d, --delay SEC      –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: $DELAY)"
    echo "  -k, --api-key KEY    API –∫–ª—é—á –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"
    echo "  -v, --verbose        –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥"
    echo "  -h, --help           –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
    echo ""
    echo "–ü—Ä–∏–º–µ—Ä—ã:"
    echo "  $0                                    # –ë–∞–∑–æ–≤–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
    echo "  $0 -u https://api.example.com -n 200 # –¢–µ—Å—Ç –ø—Ä–æ–¥–∞–∫—à–µ–Ω —Å–µ—Ä–≤–µ—Ä–∞"
    echo "  $0 -e /chat -k your-api-key -v       # –¢–µ—Å—Ç –∑–∞—â–∏—â–µ–Ω–Ω–æ–≥–æ endpoint"
}

# –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
while [[ $# -gt 0 ]]; do
    case $1 in
        -u|--url)
            URL="$2"
            shift 2
            ;;
        -e|--endpoint)
            ENDPOINT="$2"
            shift 2
            ;;
        -n|--requests)
            REQUESTS_COUNT="$2"
            shift 2
            ;;
        -c|--concurrent)
            CONCURRENT_REQUESTS="$2"
            shift 2
            ;;
        -d|--delay)
            DELAY="$2"
            shift 2
            ;;
        -k|--api-key)
            API_KEY="$2"
            shift 2
            ;;
        -v|--verbose)
            VERBOSE=true
            shift
            ;;
        -h|--help)
            show_help
            exit 0
            ;;
        *)
            echo -e "${RED}–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø—Ü–∏—è: $1${NC}"
            show_help
            exit 1
            ;;
    esac
done

FULL_URL="$URL$ENDPOINT"

echo -e "${BLUE}üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:${NC}"
echo "   URL: $FULL_URL"
echo "   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤: $REQUESTS_COUNT"
echo "   –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã: $CONCURRENT_REQUESTS"
echo "   –ó–∞–¥–µ—Ä–∂–∫–∞: $DELAY —Å–µ–∫"
echo "   API –∫–ª—é—á: $(if [[ -n "$API_KEY" ]]; then echo "–Ω–∞—Å—Ç—Ä–æ–µ–Ω"; else echo "–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"; fi)"
echo "   –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥: $VERBOSE"
echo ""

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
check_tools() {
    local missing_tools=()
    
    if ! command -v curl >/dev/null 2>&1; then
        missing_tools+=("curl")
    fi
    
    if ! command -v bc >/dev/null 2>&1; then
        missing_tools+=("bc")
    fi
    
    if [[ ${#missing_tools[@]} -gt 0 ]]; then
        echo -e "${RED}‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: ${missing_tools[*]}${NC}"
        echo "   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Ç–µ—Å—Ç–æ–≤"
        exit 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
test_server_availability() {
    echo -e "${YELLOW}üîå –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞...${NC}"
    
    local headers=""
    if [[ -n "$API_KEY" ]]; then
        headers="-H \"X-API-Key: $API_KEY\""
    fi
    
    if eval curl -s -f $headers "$FULL_URL" >/dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω${NC}"
        return 0
    else
        echo -e "${RED}‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: $FULL_URL${NC}"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
make_request() {
    local request_id="$1"
    local headers=""
    
    if [[ -n "$API_KEY" ]]; then
        headers="-H \"X-API-Key: $API_KEY\""
    fi
    
    local start_time
    start_time=$(date +%s.%N)
    
    local response
    local status_code
    local response_time
    
    response=$(eval curl -s -w "%{http_code}|%{time_total}" $headers "$FULL_URL" 2>/dev/null)
    status_code=$(echo "$response" | tail -1 | cut -d'|' -f1)
    response_time=$(echo "$response" | tail -1 | cut -d'|' -f2)
    
    local end_time
    end_time=$(date +%s.%N)
    local total_time
    total_time=$(echo "$end_time - $start_time" | bc)
    
    if [[ "$VERBOSE" == true ]]; then
        echo "Request $request_id: Status=$status_code, Time=${response_time}s"
    fi
    
    echo "$request_id|$status_code|$response_time|$total_time"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
test_sequential_requests() {
    echo -e "${YELLOW}üìà –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤...${NC}"
    
    local success_count=0
    local rate_limited_count=0
    local error_count=0
    local total_time=0
    
    local start_time
    start_time=$(date +%s.%N)
    
    for ((i=1; i<=REQUESTS_COUNT; i++)); do
        local result
        result=$(make_request "$i")
        
        local status_code
        status_code=$(echo "$result" | cut -d'|' -f2)
        
        local response_time
        response_time=$(echo "$result" | cut -d'|' -f3)
        total_time=$(echo "$total_time + $response_time" | bc)
        
        case $status_code in
            200)
                ((success_count++))
                ;;
            429)
                ((rate_limited_count++))
                if [[ "$VERBOSE" == true ]]; then
                    echo -e "${YELLOW}‚ö†Ô∏è Request $i: Rate limited${NC}"
                fi
                ;;
            *)
                ((error_count++))
                if [[ "$VERBOSE" == true ]]; then
                    echo -e "${RED}‚ùå Request $i: Error $status_code${NC}"
                fi
                ;;
        esac
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 –∑–∞–ø—Ä–æ—Å–æ–≤
        if [[ $((i % 10)) -eq 0 ]] && [[ "$VERBOSE" != true ]]; then
            echo -n "."
        fi
        
        sleep "$DELAY"
    done
    
    local end_time
    end_time=$(date +%s.%N)
    local test_duration
    test_duration=$(echo "$end_time - $start_time" | bc)
    
    echo ""
    echo -e "${BLUE}üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:${NC}"
    echo "   –£—Å–ø–µ—à–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã: $success_count"
    echo "   Rate limited: $rate_limited_count"
    echo "   –û—à–∏–±–∫–∏: $error_count"
    echo "   –û–±—â–µ–µ –≤—Ä–µ–º—è: ${test_duration}s"
    echo "   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: $(echo "scale=3; $total_time / $REQUESTS_COUNT" | bc)s"
    echo "   –ó–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É: $(echo "scale=2; $REQUESTS_COUNT / $test_duration" | bc)"
    
    if [[ $rate_limited_count -gt 0 ]]; then
        echo -e "${GREEN}‚úÖ Rate limiting —Ä–∞–±–æ—Ç–∞–µ—Ç (–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ $rate_limited_count –∑–∞–ø—Ä–æ—Å–æ–≤)${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è Rate limiting –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –∏–ª–∏ –ª–∏–º–∏—Ç —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∏–π${NC}"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
test_concurrent_requests() {
    echo -e "${YELLOW}‚ö° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤...${NC}"
    
    local temp_dir
    temp_dir=$(mktemp -d)
    local pids=()
    
    local start_time
    start_time=$(date +%s.%N)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    for ((i=1; i<=CONCURRENT_REQUESTS; i++)); do
        (
            local batch_size=$((REQUESTS_COUNT / CONCURRENT_REQUESTS))
            local start_id=$(((i-1) * batch_size + 1))
            local end_id=$((i * batch_size))
            
            for ((j=start_id; j<=end_id; j++)); do
                make_request "$j" >> "$temp_dir/results_$i.txt"
                sleep 0.01  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
            done
        ) &
        pids+=($!)
    done
    
    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    for pid in "${pids[@]}"; do
        wait "$pid"
    done
    
    local end_time
    end_time=$(date +%s.%N)
    local test_duration
    test_duration=$(echo "$end_time - $start_time" | bc)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    local success_count=0
    local rate_limited_count=0
    local error_count=0
    
    for file in "$temp_dir"/results_*.txt; do
        if [[ -f "$file" ]]; then
            while IFS='|' read -r request_id status_code response_time total_time; do
                case $status_code in
                    200)
                        ((success_count++))
                        ;;
                    429)
                        ((rate_limited_count++))
                        ;;
                    *)
                        ((error_count++))
                        ;;
                esac
            done < "$file"
        fi
    done
    
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    rm -rf "$temp_dir"
    
    echo -e "${BLUE}üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:${NC}"
    echo "   –£—Å–ø–µ—à–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã: $success_count"
    echo "   Rate limited: $rate_limited_count"
    echo "   –û—à–∏–±–∫–∏: $error_count"
    echo "   –û–±—â–µ–µ –≤—Ä–µ–º—è: ${test_duration}s"
    echo "   –ó–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É: $(echo "scale=2; $REQUESTS_COUNT / $test_duration" | bc)"
    
    if [[ $rate_limited_count -gt 0 ]]; then
        echo -e "${GREEN}‚úÖ DDoS –∑–∞—â–∏—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç (–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ $rate_limited_count –∑–∞–ø—Ä–æ—Å–æ–≤)${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è DDoS –∑–∞—â–∏—Ç–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞ –∏–ª–∏ –ª–∏–º–∏—Ç —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∏–π${NC}"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è burst –∑–∞–ø—Ä–æ—Å–æ–≤
test_burst_requests() {
    echo -e "${YELLOW}üí• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ burst –∑–∞–ø—Ä–æ—Å–æ–≤...${NC}"
    
    local burst_size=20
    local success_count=0
    local rate_limited_count=0
    
    echo "   –û—Ç–ø—Ä–∞–≤–∫–∞ $burst_size –∑–∞–ø—Ä–æ—Å–æ–≤ –±–µ–∑ –∑–∞–¥–µ—Ä–∂–∫–∏..."
    
    for ((i=1; i<=burst_size; i++)); do
        local result
        result=$(make_request "burst_$i")
        
        local status_code
        status_code=$(echo "$result" | cut -d'|' -f2)
        
        case $status_code in
            200)
                ((success_count++))
                ;;
            429)
                ((rate_limited_count++))
                ;;
        esac
    done
    
    echo -e "${BLUE}üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã burst —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:${NC}"
    echo "   –£—Å–ø–µ—à–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã: $success_count"
    echo "   Rate limited: $rate_limited_count"
    
    if [[ $rate_limited_count -gt 0 ]]; then
        echo -e "${GREEN}‚úÖ Burst –∑–∞—â–∏—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è Burst –∑–∞—â–∏—Ç–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞${NC}"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
test_recovery_after_blocking() {
    echo -e "${YELLOW}üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏...${NC}"
    
    # –°–Ω–∞—á–∞–ª–∞ –≤—ã–∑—ã–≤–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
    echo "   –í—ã–∑—ã–≤–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É..."
    for ((i=1; i<=50; i++)); do
        make_request "block_$i" >/dev/null
    done
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã
    local result
    result=$(make_request "check_block")
    local status_code
    status_code=$(echo "$result" | cut -d'|' -f2)
    
    if [[ $status_code -eq 429 ]]; then
        echo -e "${GREEN}‚úÖ IP —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω${NC}"
        
        # –ñ–¥–µ–º –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
        echo "   –û–∂–∏–¥–∞–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è..."
        sleep 10
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
        result=$(make_request "check_recovery")
        status_code=$(echo "$result" | cut -d'|' -f2)
        
        if [[ $status_code -eq 200 ]]; then
            echo -e "${GREEN}‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç${NC}"
        else
            echo -e "${YELLOW}‚ö†Ô∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏${NC}"
        fi
    else
        echo -e "${YELLOW}‚ö†Ô∏è –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞ –∏–ª–∏ –ª–∏–º–∏—Ç —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∏–π${NC}"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ rate limiting
analyze_rate_limit_headers() {
    echo -e "${YELLOW}üìã –ê–Ω–∞–ª–∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ rate limiting...${NC}"
    
    local headers=""
    if [[ -n "$API_KEY" ]]; then
        headers="-H \"X-API-Key: $API_KEY\""
    fi
    
    local response_headers
    response_headers=$(eval curl -s -I $headers "$FULL_URL" 2>/dev/null)
    
    if [[ -n "$response_headers" ]]; then
        echo -e "${BLUE}üìä –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏:${NC}"
        
        # –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ rate limiting
        local rate_limit_headers=(
            "X-RateLimit-Limit"
            "X-RateLimit-Remaining"
            "X-RateLimit-Reset"
            "Retry-After"
            "X-Rate-Limit"
        )
        
        for header in "${rate_limit_headers[@]}"; do
            local value
            value=$(echo "$response_headers" | grep -i "^$header:" | cut -d: -f2- | sed 's/^[[:space:]]*//')
            
            if [[ -n "$value" ]]; then
                echo -e "${GREEN}‚úÖ $header: $value${NC}"
            fi
        done
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ –ø–æ–ª–µ–∑–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        local security_headers=(
            "X-Security-Headers"
            "X-Process-Time"
        )
        
        for header in "${security_headers[@]}"; do
            local value
            value=$(echo "$response_headers" | grep -i "^$header:" | cut -d: -f2- | sed 's/^[[:space:]]*//')
            
            if [[ -n "$value" ]]; then
                echo -e "${BLUE}‚ÑπÔ∏è $header: $value${NC}"
            fi
        done
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞
generate_report() {
    echo ""
    echo -e "${GREEN}üìä –°–≤–æ–¥–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Rate Limiting${NC}"
    echo "=================================================="
    echo -e "${BLUE}üéØ –¶–µ–ª—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:${NC}"
    echo "   –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É rate limiting –∏ DDoS –∑–∞—â–∏—Ç—ã"
    echo ""
    echo -e "${BLUE}üîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:${NC}"
    echo "   ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ rate limiting –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –Ω–∞–≥—Ä—É–∑–∫–æ–π"
    echo "   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ whitelist –¥–ª—è –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö IP"
    echo "   ‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã"
    echo "   ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–ª–µ—Ä—Ç—ã –Ω–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤"
    echo "   ‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ —Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –∑–∞—â–∏—Ç—É"
    echo ""
    echo -e "${YELLOW}üìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:${NC}"
    echo "   1. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞"
    echo "   2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ rate limiting"
    echo "   3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Å —Ä–∞–∑–Ω—ã—Ö IP –∞–¥—Ä–µ—Å–æ–≤"
    echo "   4. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–ª–µ—Ä—Ç—ã –Ω–∞ DDoS –∞—Ç–∞–∫–∏"
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    check_tools
    
    if ! test_server_availability; then
        exit 1
    fi
    
    analyze_rate_limit_headers
    test_sequential_requests
    test_burst_requests
    test_concurrent_requests
    test_recovery_after_blocking
    
    generate_report
    
    echo ""
    echo -e "${GREEN}‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Rate Limiting –∑–∞–≤–µ—Ä—à–µ–Ω–æ${NC}"
}

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main