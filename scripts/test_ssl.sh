#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è SSL –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
# –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã, cipher suites, security headers –∏ –æ–±—â—É—é –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å

set -e

DOMAIN=""
PORT=443
TIMEOUT=10
VERBOSE=false

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${GREEN}üîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SSL –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏${NC}"
echo ""

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø—Ä–∞–≤–∫–∏
show_help() {
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 DOMAIN [–æ–ø—Ü–∏–∏]"
    echo ""
    echo "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:"
    echo "  DOMAIN           –î–æ–º–µ–Ω–Ω–æ–µ –∏–º—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
    echo ""
    echo "–û–ø—Ü–∏–∏:"
    echo "  -p, --port PORT  –ü–æ—Ä—Ç –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 443)"
    echo "  -t, --timeout N  –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 10)"
    echo "  -v, --verbose    –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥"
    echo "  -h, --help       –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
    echo ""
    echo "–ü—Ä–∏–º–µ—Ä—ã:"
    echo "  $0 example.com"
    echo "  $0 api.example.com -p 8443 -v"
}

# –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
while [[ $# -gt 0 ]]; do
    case $1 in
        -p|--port)
            PORT="$2"
            shift 2
            ;;
        -t|--timeout)
            TIMEOUT="$2"
            shift 2
            ;;
        -v|--verbose)
            VERBOSE=true
            shift
            ;;
        -h|--help)
            show_help
            exit 0
            ;;
        -*)
            echo -e "${RED}–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø—Ü–∏—è: $1${NC}"
            show_help
            exit 1
            ;;
        *)
            if [[ -z "$DOMAIN" ]]; then
                DOMAIN="$1"
            else
                echo -e "${RED}–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤${NC}"
                show_help
                exit 1
            fi
            shift
            ;;
    esac
done

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
if [[ -z "$DOMAIN" ]]; then
    echo -e "${RED}‚ùå –ù–µ —É–∫–∞–∑–∞–Ω –¥–æ–º–µ–Ω${NC}"
    show_help
    exit 1
fi

echo -e "${BLUE}üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:${NC}"
echo "   –î–æ–º–µ–Ω: $DOMAIN"
echo "   –ü–æ—Ä—Ç: $PORT"
echo "   –¢–∞–π–º–∞—É—Ç: $TIMEOUT —Å–µ–∫"
echo "   –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥: $VERBOSE"
echo ""

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
check_tools() {
    local missing_tools=()
    
    if ! command -v openssl >/dev/null 2>&1; then
        missing_tools+=("openssl")
    fi
    
    if ! command -v curl >/dev/null 2>&1; then
        missing_tools+=("curl")
    fi
    
    if ! command -v nmap >/dev/null 2>&1; then
        echo -e "${YELLOW}‚ö†Ô∏è nmap –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã${NC}"
    fi
    
    if [[ ${#missing_tools[@]} -gt 0 ]]; then
        echo -e "${RED}‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: ${missing_tools[*]}${NC}"
        echo "   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Ç–µ—Å—Ç–æ–≤"
        exit 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
test_connection() {
    echo -e "${YELLOW}üîå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...${NC}"
    
    if timeout $TIMEOUT bash -c "</dev/tcp/$DOMAIN/$PORT" 2>/dev/null; then
        echo -e "${GREEN}‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ $DOMAIN:$PORT —É—Å–ø–µ—à–Ω–æ${NC}"
        return 0
    else
        echo -e "${RED}‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ $DOMAIN:$PORT${NC}"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
test_certificate() {
    echo -e "${YELLOW}üìú –ü—Ä–æ–≤–µ—Ä–∫–∞ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞...${NC}"
    
    local cert_info
    cert_info=$(echo | openssl s_client -servername "$DOMAIN" -connect "$DOMAIN:$PORT" 2>/dev/null | openssl x509 -noout -text 2>/dev/null)
    
    if [[ -z "$cert_info" ]]; then
        echo -e "${RED}‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–µ${NC}"
        return 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
    local expiry_date
    expiry_date=$(echo | openssl s_client -servername "$DOMAIN" -connect "$DOMAIN:$PORT" 2>/dev/null | openssl x509 -noout -enddate 2>/dev/null | cut -d= -f2)
    
    if [[ -n "$expiry_date" ]]; then
        local expiry_timestamp
        expiry_timestamp=$(date -d "$expiry_date" +%s 2>/dev/null || date -j -f "%b %d %H:%M:%S %Y %Z" "$expiry_date" +%s 2>/dev/null)
        local current_timestamp
        current_timestamp=$(date +%s)
        local days_until_expiry
        days_until_expiry=$(( (expiry_timestamp - current_timestamp) / 86400 ))
        
        if [[ $days_until_expiry -gt 30 ]]; then
            echo -e "${GREEN}‚úÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω (–∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ $days_until_expiry –¥–Ω–µ–π)${NC}"
        elif [[ $days_until_expiry -gt 0 ]]; then
            echo -e "${YELLOW}‚ö†Ô∏è –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å–∫–æ—Ä–æ –∏—Å—Ç–µ—á–µ—Ç (—á–µ—Ä–µ–∑ $days_until_expiry –¥–Ω–µ–π)${NC}"
        else
            echo -e "${RED}‚ùå –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∏—Å—Ç–µ–∫${NC}"
        fi
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Subject Alternative Names
    local san
    san=$(echo "$cert_info" | grep -A1 "Subject Alternative Name" | tail -1 | sed 's/^[[:space:]]*//')
    
    if [[ -n "$san" ]]; then
        echo -e "${GREEN}‚úÖ SAN –Ω–∞–π–¥–µ–Ω: $san${NC}"
        
        if echo "$san" | grep -q "$DOMAIN"; then
            echo -e "${GREEN}‚úÖ –î–æ–º–µ–Ω $DOMAIN –Ω–∞–π–¥–µ–Ω –≤ SAN${NC}"
        else
            echo -e "${YELLOW}‚ö†Ô∏è –î–æ–º–µ–Ω $DOMAIN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ SAN${NC}"
        fi
    else
        echo -e "${YELLOW}‚ö†Ô∏è Subject Alternative Names –Ω–µ –Ω–∞–π–¥–µ–Ω—ã${NC}"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ–¥–ø–∏—Å–∏
    local signature_algorithm
    signature_algorithm=$(echo "$cert_info" | grep "Signature Algorithm" | head -1 | awk '{print $3}')
    
    if [[ "$signature_algorithm" == "sha256WithRSAEncryption" ]] || [[ "$signature_algorithm" == "ecdsa-with-SHA256" ]]; then
        echo -e "${GREEN}‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ–¥–ø–∏—Å–∏: $signature_algorithm${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è –ê–ª–≥–æ—Ä–∏—Ç–º –ø–æ–¥–ø–∏—Å–∏: $signature_algorithm${NC}"
    fi
    
    if [[ "$VERBOSE" == true ]]; then
        echo -e "${BLUE}üìã –î–µ—Ç–∞–ª–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞:${NC}"
        echo "$cert_info" | grep -E "(Subject:|Issuer:|Not Before:|Not After:|Public Key Algorithm:|RSA Public-Key:|Subject Alternative Name)" | sed 's/^/   /'
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ SSL/TLS –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤
test_protocols() {
    echo -e "${YELLOW}üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤...${NC}"
    
    local protocols=("ssl3" "tls1" "tls1_1" "tls1_2" "tls1_3")
    local secure_protocols=()
    local insecure_protocols=()
    
    for protocol in "${protocols[@]}"; do
        if echo | openssl s_client -"$protocol" -connect "$DOMAIN:$PORT" 2>/dev/null | grep -q "Verify return code: 0"; then
            case $protocol in
                "tls1_2"|"tls1_3")
                    secure_protocols+=("$protocol")
                    ;;
                *)
                    insecure_protocols+=("$protocol")
                    ;;
            esac
        fi
    done
    
    if [[ ${#secure_protocols[@]} -gt 0 ]]; then
        echo -e "${GREEN}‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã: ${secure_protocols[*]}${NC}"
    fi
    
    if [[ ${#insecure_protocols[@]} -gt 0 ]]; then
        echo -e "${RED}‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã: ${insecure_protocols[*]}${NC}"
        echo -e "${YELLOW}   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—Ç–∫–ª—é—á–∏—Ç—å: ${insecure_protocols[*]}${NC}"
    else
        echo -e "${GREEN}‚úÖ –ù–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã${NC}"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ cipher suites
test_cipher_suites() {
    echo -e "${YELLOW}üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ cipher suites...${NC}"
    
    local cipher_info
    cipher_info=$(echo | openssl s_client -servername "$DOMAIN" -connect "$DOMAIN:$PORT" -cipher 'ALL:!aNULL:!eNULL' 2>/dev/null | grep "Cipher")
    
    if [[ -n "$cipher_info" ]]; then
        local cipher
        cipher=$(echo "$cipher_info" | awk '{print $3}')
        echo -e "${GREEN}‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π cipher: $cipher${NC}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–ª–∞–±—ã–µ cipher suites
        if echo "$cipher" | grep -qE "(RC4|DES|MD5|NULL)"; then
            echo -e "${RED}‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–ª–∞–±—ã–π cipher suite${NC}"
        elif echo "$cipher" | grep -qE "(AES256|CHACHA20)"; then
            echo -e "${GREEN}‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–∏–ª—å–Ω—ã–π cipher suite${NC}"
        fi
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Perfect Forward Secrecy
    local pfs_info
    pfs_info=$(echo | openssl s_client -servername "$DOMAIN" -connect "$DOMAIN:$PORT" 2>/dev/null | grep -E "(ECDHE|DHE)")
    
    if [[ -n "$pfs_info" ]]; then
        echo -e "${GREEN}‚úÖ Perfect Forward Secrecy –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è Perfect Forward Secrecy –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω${NC}"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ security headers
test_security_headers() {
    echo -e "${YELLOW}üõ°Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ security headers...${NC}"
    
    local headers
    headers=$(curl -s -I "https://$DOMAIN:$PORT/" --connect-timeout $TIMEOUT 2>/dev/null)
    
    if [[ -z "$headers" ]]; then
        echo -e "${RED}‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å HTTP headers${NC}"
        return 1
    fi
    
    # –°–ø–∏—Å–æ–∫ –≤–∞–∂–Ω—ã—Ö security headers
    local security_headers=(
        "Strict-Transport-Security"
        "X-Frame-Options"
        "X-Content-Type-Options"
        "X-XSS-Protection"
        "Referrer-Policy"
        "Content-Security-Policy"
        "Permissions-Policy"
    )
    
    local found_headers=0
    
    for header in "${security_headers[@]}"; do
        if echo "$headers" | grep -qi "^$header:"; then
            echo -e "${GREEN}‚úÖ $header –Ω–∞–π–¥–µ–Ω${NC}"
            ((found_headers++))
            
            if [[ "$VERBOSE" == true ]]; then
                local value
                value=$(echo "$headers" | grep -i "^$header:" | cut -d: -f2- | sed 's/^[[:space:]]*//')
                echo -e "${BLUE}   –ó–Ω–∞—á–µ–Ω–∏–µ: $value${NC}"
            fi
        else
            echo -e "${YELLOW}‚ö†Ô∏è $header –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç${NC}"
        fi
    done
    
    echo -e "${BLUE}üìä –ù–∞–π–¥–µ–Ω–æ security headers: $found_headers/${#security_headers[@]}${NC}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º HSTS
    local hsts
    hsts=$(echo "$headers" | grep -i "^Strict-Transport-Security:" | cut -d: -f2- | sed 's/^[[:space:]]*//')
    
    if [[ -n "$hsts" ]]; then
        if echo "$hsts" | grep -q "includeSubDomains"; then
            echo -e "${GREEN}‚úÖ HSTS –≤–∫–ª—é—á–∞–µ—Ç –ø–æ–¥–¥–æ–º–µ–Ω—ã${NC}"
        else
            echo -e "${YELLOW}‚ö†Ô∏è HSTS –Ω–µ –≤–∫–ª—é—á–∞–µ—Ç –ø–æ–¥–¥–æ–º–µ–Ω—ã${NC}"
        fi
        
        if echo "$hsts" | grep -q "preload"; then
            echo -e "${GREEN}‚úÖ HSTS preload –≤–∫–ª—é—á–µ–Ω${NC}"
        else
            echo -e "${YELLOW}‚ö†Ô∏è HSTS preload –Ω–µ –≤–∫–ª—é—á–µ–Ω${NC}"
        fi
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
test_vulnerabilities() {
    echo -e "${YELLOW}üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π...${NC}"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Heartbleed
    local heartbleed_test
    heartbleed_test=$(echo | openssl s_client -connect "$DOMAIN:$PORT" -tlsextdebug 2>&1 | grep -i heartbeat)
    
    if [[ -z "$heartbleed_test" ]]; then
        echo -e "${GREEN}‚úÖ Heartbleed: –Ω–µ —É—è–∑–≤–∏–º${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è Heartbleed: —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏${NC}"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ POODLE (SSLv3)
    if echo | openssl s_client -ssl3 -connect "$DOMAIN:$PORT" 2>/dev/null | grep -q "Verify return code: 0"; then
        echo -e "${RED}‚ùå POODLE: —É—è–∑–≤–∏–º (SSLv3 –≤–∫–ª—é—á–µ–Ω)${NC}"
    else
        echo -e "${GREEN}‚úÖ POODLE: –Ω–µ —É—è–∑–≤–∏–º (SSLv3 –æ—Ç–∫–ª—é—á–µ–Ω)${NC}"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ BEAST (TLS 1.0)
    if echo | openssl s_client -tls1 -connect "$DOMAIN:$PORT" 2>/dev/null | grep -q "Verify return code: 0"; then
        echo -e "${YELLOW}‚ö†Ô∏è BEAST: –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ —É—è–∑–≤–∏–º (TLS 1.0 –≤–∫–ª—é—á–µ–Ω)${NC}"
    else
        echo -e "${GREEN}‚úÖ BEAST: –Ω–µ —É—è–∑–≤–∏–º (TLS 1.0 –æ—Ç–∫–ª—é—á–µ–Ω)${NC}"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å –ø–æ–º–æ—â—å—é nmap
test_with_nmap() {
    if command -v nmap >/dev/null 2>&1; then
        echo -e "${YELLOW}üîé –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å nmap...${NC}"
        
        local nmap_result
        nmap_result=$(nmap --script ssl-enum-ciphers -p "$PORT" "$DOMAIN" 2>/dev/null)
        
        if [[ -n "$nmap_result" ]]; then
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â—É—é –æ—Ü–µ–Ω–∫—É
            local grade
            grade=$(echo "$nmap_result" | grep -o "least strength: [A-F]" | cut -d: -f2 | tr -d ' ')
            
            if [[ -n "$grade" ]]; then
                case $grade in
                    A|A+)
                        echo -e "${GREEN}‚úÖ –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ SSL: $grade${NC}"
                        ;;
                    B|C)
                        echo -e "${YELLOW}‚ö†Ô∏è –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ SSL: $grade${NC}"
                        ;;
                    D|F)
                        echo -e "${RED}‚ùå –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ SSL: $grade${NC}"
                        ;;
                esac
            fi
            
            if [[ "$VERBOSE" == true ]]; then
                echo -e "${BLUE}üìã –î–µ—Ç–∞–ª–∏ nmap:${NC}"
                echo "$nmap_result" | grep -E "(TLSv|SSLv|Cipher)" | sed 's/^/   /'
            fi
        fi
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞
generate_report() {
    echo ""
    echo -e "${GREEN}üìä –°–≤–æ–¥–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è SSL –¥–ª—è $DOMAIN:$PORT${NC}"
    echo "=================================================="
    
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–¥–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    echo -e "${BLUE}üîó –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏:${NC}"
    echo "   ‚Ä¢ SSL Labs: https://www.ssllabs.com/ssltest/analyze.html?d=$DOMAIN"
    echo "   ‚Ä¢ Security Headers: https://securityheaders.com/?q=https://$DOMAIN"
    echo "   ‚Ä¢ Mozilla Observatory: https://observatory.mozilla.org/analyze/$DOMAIN"
    echo ""
    
    echo -e "${YELLOW}üìù –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é:${NC}"
    echo "   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ TLS 1.2 –∏ TLS 1.3"
    echo "   ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –≤—Å–µ security headers"
    echo "   ‚Ä¢ –í–∫–ª—é—á–∏—Ç–µ HSTS —Å preload"
    echo "   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∏–ª—å–Ω—ã–µ cipher suites"
    echo "   ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Perfect Forward Secrecy"
    echo "   ‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è–π—Ç–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã"
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    check_tools
    
    if ! test_connection; then
        exit 1
    fi
    
    test_certificate
    test_protocols
    test_cipher_suites
    test_security_headers
    test_vulnerabilities
    test_with_nmap
    
    generate_report
    
    echo ""
    echo -e "${GREEN}‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SSL –∑–∞–≤–µ—Ä—à–µ–Ω–æ${NC}"
}

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main