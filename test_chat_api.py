#!/usr/bin/env python3
"""
–¢–µ—Å—Ç Chat API —Å RAG —Å–∏—Å—Ç–µ–º–æ–π.
"""

import json
import requests

def test_chat_api():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç Chat API."""
    base_url = "http://localhost:8000"
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    test_queries = [
        "–†–∞—Å—Å–∫–∞–∂–∏ –æ –∫–æ–º–ø–∞–Ω–∏–∏ Optima AI",
        "–ö–∞–∫–∏–µ —É—Å–ª—É–≥–∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ê–∫–∞–¥–µ–º–∏—è?",
        "–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –æ–±—É—á–µ–Ω–∏–µ AI-Full Stack?",
        "–ö—Ç–æ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–∏ –∫–æ–º–ø–∞–Ω–∏–∏?",
        "–ß—Ç–æ –¥–∞–µ—Ç –ø—Ä–æ–∫–∞—á–∫–∞ –Ω–∞–≤—ã–∫–∞ –ø—Ä–æ–º–ø—Ç–∏–Ω–≥–∞?"
    ]
    
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Chat API —Å RAG —Å–∏—Å—Ç–µ–º–æ–π")
    print("=" * 60)
    
    for i, query in enumerate(test_queries, 1):
        print(f"\nüìù –¢–µ—Å—Ç #{i}: {query}")
        print("-" * 40)
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
        payload = {
            "messages": [
                {"role": "user", "content": query}
            ],
            "use_cache": False,
            "stream": False
        }
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —Å API –∫–ª—é—á–æ–º
            headers = {
                "Content-Type": "application/json",
                "X-API-Key": "your_optional_api_key_for_authentication"
            }
            response = requests.post(
                f"{base_url}/chat",
                json=payload,
                headers=headers,
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                bot_response = data.get("message", {}).get("content", "")
                processing_time = data.get("processing_time", 0)
                from_cache = data.get("from_cache", False)
                
                print(f"‚úÖ –°—Ç–∞—Ç—É—Å: {response.status_code}")
                print(f"‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.2f}—Å")
                print(f"üíæ –ò–∑ –∫—ç—à–∞: {from_cache}")
                print(f"üìÑ –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {len(bot_response)} —Å–∏–º–≤–æ–ª–æ–≤")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ markdown —Å–∏–º–≤–æ–ª—ã
                markdown_symbols = ['**', '*', '#', '`', '[', ']', '>', '|', '~~']
                found_markdown = []
                for symbol in markdown_symbols:
                    if symbol in bot_response:
                        found_markdown.append(symbol)
                
                if found_markdown:
                    print(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã markdown —Å–∏–º–≤–æ–ª—ã: {found_markdown}")
                else:
                    print("‚úÖ Markdown —Å–∏–º–≤–æ–ª—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã")
                
                print(f"\nüí¨ –û—Ç–≤–µ—Ç –±–æ—Ç–∞:")
                print(bot_response[:300] + "..." if len(bot_response) > 300 else bot_response)
                
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
                print(f"üìÑ –û—Ç–≤–µ—Ç: {response.text}")
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
    
    print("\n" + "=" * 60)
    print("üèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    test_chat_api()