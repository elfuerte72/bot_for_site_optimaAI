"""
OptimaAI Bot API - —É–ª—É—á—à–µ–Ω–Ω—ã–π –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç API –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ OpenAI —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é.
"""

import time
import logging
from contextlib import asynccontextmanager
from datetime import datetime
from typing import Dict, Any

from fastapi import FastAPI, HTTPException, Depends, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from fastapi.exception_handlers import http_exception_handler
from pydantic import ValidationError as PydanticValidationError
import uvicorn

from src.config import Settings, get_settings
from src.services.openai_service import OpenAIService
from src.services.cache_service import CacheService
from src.models.message import (
    ChatRequest, MessageResponse, ErrorResponse, HealthResponse
)
from src.validators.input_validator import (
    validate_request_data, validate_cors_origin
)
from src.security.config_validator import validate_security_config
from src.middleware.logging import RequestLoggingMiddleware
from src.middleware.rate_limit import RateLimitMiddleware
from src.middleware.auth import AuthMiddleware
from src.middleware.sanitization import SanitizationMiddleware
from src.exceptions import (
    AppBaseException, ValidationError, ConfigurationError,
    OpenAIError, RAGError, CacheError, RateLimitError
)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–µ—Ä–≤–∏—Å–æ–≤
cache_service: CacheService = None
start_time: float = time.time()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('app.log', encoding='utf-8')
    ]
)

logger = logging.getLogger(__name__)


@asynccontextmanager
async def lifespan(app: FastAPI):
    """
    –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –æ—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤.
    """
    global cache_service
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è OptimaAI Bot")
    
    try:
        settings = get_settings()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—ç—à–∞
        if settings.enable_cache:
            cache_service = CacheService(ttl_seconds=settings.cache_ttl_seconds)
            logger.info("–ö—ç—à-—Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        security_result = validate_security_config(settings)
        if not security_result["is_secure"]:
            logger.warning("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            for issue in security_result["issues"]:
                logger.error(f"üî¥ {issue['category']}: {issue['message']}")
        
        logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {str(e)}")
        raise ConfigurationError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: {str(e)}")
    
    yield
    
    # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
    logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
    if cache_service:
        cache_service.clear_all()
        logger.info("–ö—ç—à –æ—á–∏—â–µ–Ω")


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è FastAPI
app = FastAPI(
    title="OptimaAI Bot API",
    description="API –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ OpenAI —Å RAG —Å–∏—Å—Ç–µ–º–æ–π",
    version="2.0.0",
    lifespan=lifespan,
    docs_url="/docs",
    redoc_url="/redoc"
)


def setup_middleware(app: FastAPI, settings: Settings):
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ middleware –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    
    Args:
        app: –≠–∫–∑–µ–º–ø–ª—è—Ä FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        settings: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    """
    # –í–∞–ª–∏–¥–∞—Ü–∏—è CORS origins
    validated_origins = []
    for origin in settings.allowed_origins:
        is_valid, warning = validate_cors_origin(origin)
        if is_valid:
            validated_origins.append(origin)
            if warning:
                logger.warning(f"CORS origin '{origin}': {warning}")
        else:
            logger.error(f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π CORS origin '{origin}': {warning}")
    
    if not validated_origins:
        logger.warning("–ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö CORS origins, –¥–æ–±–∞–≤–ª—è–µ–º localhost –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        validated_origins = ["http://localhost:3000"]
    
    # CORS middleware —Å –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    app.add_middleware(
        CORSMiddleware,
        allow_origins=validated_origins,
        allow_credentials=True,
        allow_methods=["GET", "POST"],
        allow_headers=["Authorization", "Content-Type", "X-API-Key"],
        expose_headers=["X-Process-Time", "X-RateLimit-*"]
    )
    
    # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–µ—Ä–µ–¥ rate limiting)
    app.add_middleware(
        AuthMiddleware,
        api_key=settings.api_key
    )
    
    # Rate limiting middleware
    app.add_middleware(
        RateLimitMiddleware,
        calls_per_minute=settings.rate_limit_per_minute
    )
    
    # –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    app.add_middleware(SanitizationMiddleware)
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º)
    app.add_middleware(RequestLoggingMiddleware)


def setup_exception_handlers(app: FastAPI):
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∏—Å–∫–ª—é—á–µ–Ω–∏–π.
    
    Args:
        app: –≠–∫–∑–µ–º–ø–ª—è—Ä FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    """
    
    @app.exception_handler(AppBaseException)
    async def app_exception_handler(request: Request, exc: AppBaseException):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {exc.message}", extra={
            "error_code": exc.error_code,
            "details": exc.details,
            "path": request.url.path
        })
        
        return JSONResponse(
            status_code=400,
            content=ErrorResponse(
                error=exc.message,
                error_code=exc.error_code,
                details=exc.details
            ).model_dump()
        )
    
    @app.exception_handler(PydanticValidationError)
    async def validation_exception_handler(request: Request, exc: PydanticValidationError):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ Pydantic."""
        logger.warning(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {str(exc)}", extra={
            "path": request.url.path,
            "errors": exc.errors()
        })
        
        return JSONResponse(
            status_code=422,
            content=ErrorResponse(
                error="–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö",
                error_code="VALIDATION_ERROR",
                details={"validation_errors": exc.errors()}
            ).model_dump()
        )
    
    @app.exception_handler(HTTPException)
    async def custom_http_exception_handler(request: Request, exc: HTTPException):
        """–ö–∞—Å—Ç–æ–º–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ HTTP –∏—Å–∫–ª—é—á–µ–Ω–∏–π."""
        if exc.status_code == 429:
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è rate limiting
            return JSONResponse(
                status_code=429,
                content=exc.detail,
                headers=exc.headers
            )
        
        return await http_exception_handler(request, exc)
    
    @app.exception_handler(Exception)
    async def general_exception_handler(request: Request, exc: Exception):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—â–∏—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π."""
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(exc)}", extra={
            "path": request.url.path,
            "exception_type": type(exc).__name__
        }, exc_info=True)
        
        return JSONResponse(
            status_code=500,
            content=ErrorResponse(
                error="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
                error_code="INTERNAL_SERVER_ERROR",
                details={"exception_type": type(exc).__name__}
            ).model_dump()
        )


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
settings = get_settings()
setup_middleware(app, settings)
setup_exception_handlers(app)


@app.get("/health", response_model=HealthResponse)
async def health_check():
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ API —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π.
    
    Returns:
        HealthResponse: –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    """
    uptime = time.time() - start_time
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    services_status = {}
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ OpenAI API
        settings = get_settings()
        if settings.openai_api_key:
            services_status["openai"] = "ok"
        else:
            services_status["openai"] = "not_configured"
    except Exception:
        services_status["openai"] = "error"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞
    if cache_service:
        services_status["cache"] = "ok"
    else:
        services_status["cache"] = "disabled"
    
    return HealthResponse(
        status="ok",
        uptime=uptime,
        services=services_status
    )


@app.post("/chat", response_model=MessageResponse)
async def chat(
    request: ChatRequest,
    settings: Settings = Depends(get_settings)
):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ —á–∞—Ç-–±–æ—Ç—É —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫.
    
    Args:
        request: –ó–∞–ø—Ä–æ—Å —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Å–æ–æ–±—â–µ–Ω–∏–π
        settings: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        
    Returns:
        MessageResponse: –û—Ç–≤–µ—Ç –±–æ—Ç–∞
        
    Raises:
        ValidationError: –ü—Ä–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞
        OpenAIError: –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö OpenAI API
        RAGError: –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö RAG —Å–∏—Å—Ç–µ–º—ã
        CacheError: –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    start_time_request = time.time()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫—ç—à–∞ –≤–∫–ª—é—á–µ–Ω–æ
        cached_response = None
        if request.use_cache and cache_service and settings.enable_cache:
            try:
                cached_response = cache_service.get(request.messages)
                if cached_response:
                    logger.info("–û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –∏–∑ –∫—ç—à–∞")
                    response = MessageResponse(**cached_response)
                    response.from_cache = True
                    response.processing_time = time.time() - start_time_request
                    return response
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑ –∫—ç—à–∞: {str(e)}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –∫—ç—à–∞
        
        # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–µ—Ç –≤ –∫—ç—à–µ, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç
        try:
            openai_service = OpenAIService(settings)
            
            # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∑–∞–ø—Ä–æ—Å–∞, –µ—Å–ª–∏ –æ–Ω–∏ —É–∫–∞–∑–∞–Ω—ã
            if request.temperature is not None:
                openai_service.temperature = request.temperature
            if request.max_tokens is not None:
                openai_service.max_tokens = request.max_tokens
            
            response = await openai_service.generate_response(
                request.messages, 
                request.stream
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –º–æ–¥–µ–ª–∏
            response.processing_time = time.time() - start_time_request
            response.model = settings.gpt_model
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {str(e)}")
            raise OpenAIError(
                f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç: {str(e)}",
                details={"model": settings.gpt_model}
            )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∫—ç—à, –µ—Å–ª–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ
        if (request.use_cache and cache_service and 
            settings.enable_cache and not response.from_cache):
            try:
                cache_service.set(request.messages, response.model_dump())
                logger.debug("–û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –∫—ç—à")
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –∫—ç—à: {str(e)}")
                # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
        
        return response
        
    except AppBaseException:
        # –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∫–∞–∫ –µ—Å—Ç—å
        raise
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ chat endpoint: {str(e)}", exc_info=True)
        raise OpenAIError(f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")


@app.get("/cache/stats")
async def get_cache_stats():
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞.
    
    Returns:
        Dict: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞
    """
    if not cache_service:
        raise HTTPException(
            status_code=404, 
            detail="–ö—ç—à –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –æ—Ç–∫–ª—é—á—ë–Ω"
        )
    
    return {
        "size": len(cache_service._cache),
        "ttl_seconds": cache_service.ttl_seconds,
        "enabled": True
    }


@app.post("/cache/clear")
async def clear_cache():
    """
    –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞.
    
    Returns:
        Dict: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∏—â–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
    """
    if not cache_service:
        raise HTTPException(
            status_code=404, 
            detail="–ö—ç—à –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –æ—Ç–∫–ª—é—á—ë–Ω"
        )
    
    count = cache_service.clear_all()
    logger.info(f"–ö—ç—à –æ—á–∏—â–µ–Ω, —É–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {count}")
    
    return {"cleared_items": count}


@app.post("/cache/clear-expired")
async def clear_expired_cache():
    """
    –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π –∫—ç—à–∞.
    
    Returns:
        Dict: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∏—â–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
    """
    if not cache_service:
        raise HTTPException(
            status_code=404, 
            detail="–ö—ç—à –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –æ—Ç–∫–ª—é—á—ë–Ω"
        )
    
    count = cache_service.clear_expired()
    logger.info(f"–û—á–∏—â–µ–Ω—ã —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–ø–∏—Å–∏ –∫—ç—à–∞: {count}")
    
    return {"cleared_items": count}


@app.get("/metrics")
async def get_metrics():
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.
    
    Returns:
        Dict: –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    """
    uptime = time.time() - start_time
    
    metrics = {
        "uptime_seconds": uptime,
        "cache_enabled": cache_service is not None,
        "cache_size": len(cache_service._cache) if cache_service else 0,
        "timestamp": datetime.now().isoformat()
    }
    
    return metrics


@app.get("/security/status")
async def get_security_status(
    settings: Settings = Depends(get_settings)
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    
    Returns:
        Dict: –°—Ç–∞—Ç—É—Å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    """
    security_result = validate_security_config(settings)
    
    # –£–±–∏—Ä–∞–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ API
    public_result = {
        "is_secure": security_result["is_secure"],
        "security_score": security_result["security_score"],
        "summary": security_result["summary"],
        "issues_count": len(security_result["issues"]),
        "warnings_count": len(security_result["warnings"]),
        "timestamp": datetime.now().isoformat(),
        "features": {
            "cors_configured": len(settings.allowed_origins) > 0,
            "api_key_auth": settings.api_key is not None,
            "rate_limiting": settings.rate_limit_per_minute > 0,
            "cache_enabled": settings.enable_cache,
            "debug_mode": settings.debug
        }
    }
    
    return public_result


if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
    security_result = validate_security_config(settings)
    if not security_result["is_secure"]:
        print("\n‚ö†Ô∏è  –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò!")
        print(f"–û—Ü–µ–Ω–∫–∞: {security_result['security_score']}/100")
        for issue in security_result["issues"]:
            print(f"  ‚Ä¢ {issue['category']}: {issue['message']}")
        print("\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É—Å—Ç—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω.\n")
    
    uvicorn.run(
        "main:app", 
        host=settings.host, 
        port=settings.port, 
        reload=settings.debug,
        log_level="info"
    )