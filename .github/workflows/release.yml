name: Release Management

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.2.3)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        type: boolean
        default: false

env:
  PYTHON_VERSION: '3.11'
  DOCKER_IMAGE: optimaai-bot

jobs:
  # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–ª–∏–∑–∞
  validate-release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is-prerelease: ${{ steps.version.outputs.is-prerelease }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Determine version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
          IS_PRERELEASE="${{ github.event.inputs.prerelease }}"
        else
          VERSION="${GITHUB_REF#refs/tags/}"
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–µ—Ä—Å–∏—è pre-release
          if [[ "$VERSION" =~ -[a-zA-Z] ]]; then
            IS_PRERELEASE="true"
          else
            IS_PRERELEASE="false"
          fi
        fi
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "is-prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
        echo "Release version: $VERSION (prerelease: $IS_PRERELEASE)"
    
    - name: Validate version format
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        if [[ ! "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$ ]]; then
          echo "Invalid version format: $VERSION"
          echo "Expected format: v1.2.3 or v1.2.3-alpha.1"
          exit 1
        fi
    
    - name: Check if tag exists
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        if git rev-parse "$VERSION" >/dev/null 2>&1; then
          echo "Tag $VERSION already exists"
          exit 1
        fi

  # –°–±–æ—Ä–∫–∞ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
  build-and-test:
    runs-on: ubuntu-latest
    needs: validate-release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Run full test suite
      run: |
        pytest --cov=src --cov-report=xml --cov-fail-under=80 -v
    
    - name: Run security checks
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        safety check --json --output safety-report.json || true
    
    - name: Build Docker image
      run: |
        VERSION="${{ needs.validate-release.outputs.version }}"
        docker build -t ${{ env.DOCKER_IMAGE }}:$VERSION .
        docker tag ${{ env.DOCKER_IMAGE }}:$VERSION ${{ env.DOCKER_IMAGE }}:latest
    
    - name: Test Docker image
      run: |
        VERSION="${{ needs.validate-release.outputs.version }}"
        docker run -d --name release-test -p 8000:8000 ${{ env.DOCKER_IMAGE }}:$VERSION
        sleep 30
        curl -f http://localhost:8000/health || exit 1
        docker stop release-test
        docker rm release-test

  # –°–æ–∑–¥–∞–Ω–∏–µ changelog
  generate-changelog:
    runs-on: ubuntu-latest
    needs: validate-release
    outputs:
      changelog: ${{ steps.changelog.outputs.changelog }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Generate changelog
      id: changelog
      run: |
        VERSION="${{ needs.validate-release.outputs.version }}"
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–µ–≥
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        echo "Generating changelog from $PREVIOUS_TAG to $VERSION"
        
        # –°–æ–∑–¥–∞–µ–º changelog
        CHANGELOG="## Changes in $VERSION\n\n"
        
        if [ -n "$PREVIOUS_TAG" ]; then
          # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–∏—Ç—ã –º–µ–∂–¥—É —Ç–µ–≥–∞–º–∏
          COMMITS=$(git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD)
        else
          # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π —Ä–µ–ª–∏–∑, –±–µ—Ä–µ–º –≤—Å–µ –∫–æ–º–º–∏—Ç—ã
          COMMITS=$(git log --pretty=format:"- %s (%h)")
        fi
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–æ–º–º–∏—Ç—ã –ø–æ —Ç–∏–ø–∞–º
        FEATURES=$(echo "$COMMITS" | grep -E "^- (feat|feature)" || true)
        FIXES=$(echo "$COMMITS" | grep -E "^- (fix|bugfix)" || true)
        DOCS=$(echo "$COMMITS" | grep -E "^- docs" || true)
        CHORES=$(echo "$COMMITS" | grep -E "^- (chore|refactor|style|test)" || true)
        OTHERS=$(echo "$COMMITS" | grep -vE "^- (feat|feature|fix|bugfix|docs|chore|refactor|style|test)" || true)
        
        if [ -n "$FEATURES" ]; then
          CHANGELOG="${CHANGELOG}### ‚ú® New Features\n$FEATURES\n\n"
        fi
        
        if [ -n "$FIXES" ]; then
          CHANGELOG="${CHANGELOG}### üêõ Bug Fixes\n$FIXES\n\n"
        fi
        
        if [ -n "$DOCS" ]; then
          CHANGELOG="${CHANGELOG}### üìö Documentation\n$DOCS\n\n"
        fi
        
        if [ -n "$CHORES" ]; then
          CHANGELOG="${CHANGELOG}### üîß Maintenance\n$CHORES\n\n"
        fi
        
        if [ -n "$OTHERS" ]; then
          CHANGELOG="${CHANGELOG}### üì¶ Other Changes\n$OTHERS\n\n"
        fi
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Docker –æ–±—Ä–∞–∑–µ
        CHANGELOG="${CHANGELOG}### üê≥ Docker Image\n"
        CHANGELOG="${CHANGELOG}- \`ghcr.io/${{ github.repository }}/${{ env.DOCKER_IMAGE }}:$VERSION\`\n\n"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º changelog
        echo -e "$CHANGELOG" > RELEASE_CHANGELOG.md
        
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –¥–ª—è GitHub output
        CHANGELOG_ESCAPED=$(echo -e "$CHANGELOG" | sed ':a;N;$!ba;s/\n/\\n/g')
        echo "changelog=$CHANGELOG_ESCAPED" >> $GITHUB_OUTPUT
    
    - name: Upload changelog
      uses: actions/upload-artifact@v3
      with:
        name: changelog
        path: RELEASE_CHANGELOG.md

  # –ü—É–±–ª–∏–∫–∞—Ü–∏—è Docker –æ–±—Ä–∞–∑–∞
  publish-docker:
    runs-on: ubuntu-latest
    needs: [validate-release, build-and-test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ghcr.io/${{ github.repository }}/${{ env.DOCKER_IMAGE }}:${{ needs.validate-release.outputs.version }}
          ghcr.io/${{ github.repository }}/${{ env.DOCKER_IMAGE }}:latest
        labels: |
          org.opencontainers.image.title=${{ env.DOCKER_IMAGE }}
          org.opencontainers.image.description=OptimaAI Bot
          org.opencontainers.image.version=${{ needs.validate-release.outputs.version }}
          org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
          org.opencontainers.image.revision=${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # –°–æ–∑–¥–∞–Ω–∏–µ GitHub Release
  create-release:
    runs-on: ubuntu-latest
    needs: [validate-release, build-and-test, generate-changelog, publish-docker]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download changelog
      uses: actions/download-artifact@v3
      with:
        name: changelog
    
    - name: Create Git tag
      if: github.event_name == 'workflow_dispatch'
      run: |
        VERSION="${{ needs.validate-release.outputs.version }}"
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git tag -a "$VERSION" -m "Release $VERSION"
        git push origin "$VERSION"
    
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ needs.validate-release.outputs.version }}
        release_name: Release ${{ needs.validate-release.outputs.version }}
        body_path: RELEASE_CHANGELOG.md
        draft: false
        prerelease: ${{ needs.validate-release.outputs.is-prerelease }}

  # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  notify:
    runs-on: ubuntu-latest
    needs: [validate-release, create-release]
    if: always()
    
    steps:
    - name: Notify success
      if: needs.create-release.result == 'success'
      run: |
        echo "üéâ Release ${{ needs.validate-release.outputs.version }} created successfully!"
        echo "Docker image: ghcr.io/${{ github.repository }}/${{ env.DOCKER_IMAGE }}:${{ needs.validate-release.outputs.version }}"
    
    - name: Notify failure
      if: needs.create-release.result == 'failure'
      run: |
        echo "‚ùå Release ${{ needs.validate-release.outputs.version }} failed!"
        exit 1

  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ –≤ —Ñ–∞–π–ª–∞—Ö
  update-version:
    runs-on: ubuntu-latest
    needs: [validate-release, create-release]
    if: needs.create-release.result == 'success' && !needs.validate-release.outputs.is-prerelease
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Update version files
      run: |
        VERSION="${{ needs.validate-release.outputs.version }}"
        VERSION_NUMBER="${VERSION#v}"  # –£–±–∏—Ä–∞–µ–º 'v' –∏–∑ –Ω–∞—á–∞–ª–∞
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é –≤ pyproject.toml –µ—Å–ª–∏ –µ—Å—Ç—å
        if [ -f pyproject.toml ]; then
          sed -i "s/version = \".*\"/version = \"$VERSION_NUMBER\"/" pyproject.toml
        fi
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é –≤ __init__.py –µ—Å–ª–∏ –µ—Å—Ç—å
        if [ -f src/__init__.py ]; then
          sed -i "s/__version__ = \".*\"/__version__ = \"$VERSION_NUMBER\"/" src/__init__.py
        fi
        
        # –°–æ–∑–¥–∞–µ–º VERSION —Ñ–∞–π–ª
        echo "$VERSION_NUMBER" > VERSION
    
    - name: Commit version updates
      run: |
        VERSION="${{ needs.validate-release.outputs.version }}"
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        if git diff --quiet; then
          echo "No version files to update"
        else
          git add .
          git commit -m "chore: bump version to $VERSION"
          git push origin main
        fi